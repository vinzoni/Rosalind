#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jul 14 17:21:18 2024

@author: vinzoni
"""

from dna_toolkit import *

def dna(dnaString):
    ''' Ex. 1: counting DNA Nucleotides '''
    a = c = g = t = 0;
    
    for nuc in dnaString:
        if nuc == 'A':
            a += 1
        elif nuc == 'C':
            c += 1
        elif nuc == 'G':
            g += 1
        elif nuc == 'T':
            t += 1
        
    return f'{a} {c} {g} {t}';
    
def rna(dnaString):
    ''' Ex. 2: Transcribing DNA to RNA '''
    return dnaString.replace('T', 'U')

def revc(dnaString):
    ''' Ex. 3: Complementing a strand of DNA and Reverting '''
    reverseDNAString = dnaString[::-1]
    complementDNA = []
    for nuc in reverseDNAString:
        if nuc == 'A':
            complementDNA.append('T')
        elif nuc == 'T':
            complementDNA.append('A')
        elif nuc == 'C':
            complementDNA.append('G')
        elif nuc == 'G':
            complementDNA.append('C')
    return ''.join(complementDNA)

def fib(n, k):
    ''' Ex. 4: Rabbits and Recurrence Relations '''
    f1 = f2 = 1
    for c in range(n-2):
        litters = f1 * k
        f1 = f2
        f2 = f2 + litters
    return f2

def fibd(n, m):
    ''' Ex. 5: Mortal Fibonacci Rabbits '''
    pairs = [0] * n
    newborns = [0] * n
    pairs[0] = pairs[1] = 1
    newborns[0] = 1
    newborns[1] = 0
    for idx in range(2, n):
        if idx - m >= 0:
            deaths = newborns[idx - m]
        else:
            deaths = 0
        offsprings = pairs[idx-1] - newborns[idx-1]
        pairs[idx] = pairs[idx-1] + offsprings - deaths
        newborns[idx] = pairs[idx] + deaths - pairs[idx-1]
        
    return pairs[n-1]

def gc(filename):
    ''' Ex. 6: Computing GC Content '''
    text = open(filename, "r").read().splitlines()
    genome_dict = {}
    for idx in range(0, len(text)-1, 2):
        (fast_id, data, score) = (text[idx][1:], text[idx+1], gc_content(text[idx+1]))
        genome_dict[fast_id] = (data, score)
        
    max_score = 0
    winning_id = ""
    for k, v in genome_dict.items():
        if v[1] > max_score:
            winning_id = k
            max_score = v[1]
    
    return winning_id + "\n" + str(max_score);

def gc(filename):
    ''' Ex. 6: Computing GC Content '''
    lines = open(filename, "r").read().splitlines()
    genome_dict = {}
    current_id = ""
    current_genome = ""
    for l in lines:
        if l[0] == ">":
            if len(current_genome) > 0:
                (fast_id, data, score) = (current_id, current_genome, gc_content(current_genome))
                genome_dict[fast_id] = (data, score)
            current_id = l[1:]
            current_genome = ""
        else:
            current_genome += l
    (fast_id, data, score) = (current_id, current_genome, gc_content(current_genome))
    genome_dict[fast_id] = (data, score)
    
            
    max_score = 0
    winning_id = ""
    for k, v in genome_dict.items():
        if v[1] > max_score:
            winning_id = k
            max_score = v[1]
    
    return winning_id + "\n" + str(max_score);

def hamm(dna1, dna2):
    ''' Ex. 7: Counting Point Mutations '''
    point_mutations = 0
    for a, b in zip(dna1, dna2):
        if a != b:
            point_mutations += 1
    return point_mutations

def iprb(k, m, n):
    ''' Ex. 8: Mendle's First Law '''
    
    total_pairs = (k + m + n) ** 2 - (k + m + n)
    mating_dict = { 
            "kk": (1, k * (k-1)),
            "km": (1, k * m),
            "kn": (1, k * n),
            "mk": (1, m * k),
            "mm": (0.75, m * (m-1)),
            "mn": (0.5, m * n),
            "nk": (1, n * k),
            "nm": (0.5, n * m),
            "nn": (0, n * (n-1)), #  superfluo
    }

    good_pairs = 0    
    pairs_sum = 0
    for k, v in mating_dict.items():
            prob = v[0]
            pairs = v[1]
            good_pairs += pairs * prob
            pairs_sum += v[1]
    
    return good_pairs / total_pairs

def prot(rnaString):
    ''' Ex. 9: Translating RNA into Protein '''
    
    RNA_codon_table = {
        "UUU": "F",      "CUU": "L",      "AUU": "I",      "GUU": "V",
        "UUC": "F",      "CUC": "L",      "AUC": "I",      "GUC": "V",
        "UUA": "L",      "CUA": "L",      "AUA": "I",      "GUA": "V",
        "UUG": "L",      "CUG": "L",      "AUG": "M",      "GUG": "V",
        "UCU": "S",      "CCU": "P",      "ACU": "T",      "GCU": "A",
        "UCC": "S",      "CCC": "P",      "ACC": "T",      "GCC": "A",
        "UCA": "S",      "CCA": "P",      "ACA": "T",      "GCA": "A",
        "UCG": "S",      "CCG": "P",      "ACG": "T",      "GCG": "A",
        "UAU": "Y",      "CAU": "H",      "AAU": "N",      "GAU": "D",
        "UAC": "Y",      "CAC": "H",      "AAC": "N",      "GAC": "D",
        "UAA": "Stop",   "CAA": "Q",      "AAA": "K",      "GAA": "E",
        "UAG": "Stop",   "CAG": "Q",      "AAG": "K",      "GAG": "E",
        "UGU": "C",      "CGU": "R",      "AGU": "S",      "GGU": "G",
        "UGC": "C",      "CGC": "R",      "AGC": "S",      "GGC": "G",
        "UGA": "Stop",   "CGA": "R",      "AGA": "R",      "GGA": "G",
        "UGG": "W",      "CGG": "R",      "AGG": "R",      "GGG": "G", 
    }

    proteinString = ""
    codon = ""    
    for nuc in rnaString:
        codon += nuc
        
        if len(codon) == 3:
            protein = RNA_codon_table[codon]
            
            if protein == "Stop":
                break
            
            proteinString += RNA_codon_table[codon]
            codon = ""
            
    return proteinString

def subs(dna1, dna2):
    ''' Ex. 10: Finding a Motif in DNA '''
    locations = []
    
    for i in range(len(dna1)-len(dna2)):
        if dna1[i:i+len(dna2)] == dna2:
            locations.append(str(i+1))
            
    return " ".join(locations)

def cons(dna1, dna2):
    ''' Ex. 11: Consensus and Profile '''
    locations = []
    
    for i in range(len(dna1)-len(dna2)):
        if dna1[i:i+len(dna2)] == dna2:
            locations.append(str(i+1))
            
    return " ".join(locations)


print ()
print (dna.__doc__)
dnaString = "CATGCGAGACATTATACACTATGGCTTGGCAGGCGAAGAATATTTCTTGGGATTTCGGACGACCACATTTCCGCCACACACGCCGCGTTGAAGCGTCCTCACGTCACGCCGTTACATTCGTATTCGCTCTAAGCGCCTCCATCACAACCTGTAATACTCTATGAGGGATCAAACCAGGTGCTAACCAAAGAACCAATCTTGCACAGCCGTGTAGGTGGTTCGTGGGAATTACCCGGAAACAGCCTAGAAGAGCATAACCACGTATCGTCGCGAACTGTGTCCATTTTCGTCGCTCAACCAAACACTACTTCGTCGAACTTGAGCGGTGCGACGGCCCTATAAGTACCTTGTATGCCGCTAGGAAGATACCGAAGATCGAAACAGTTATCGGGAGGCAACTGTGTCGTTCCTTACATGTGAGAAAGCACCCCGGAGGGGTGTACGCATATCATGGCCATCTGCGGGGCGAATTGATCTTTAGACCCCGCTTACCCCACGTCGCTTTCCGTCCTTCTTCATAAGACCCCTAAGGGTATGTCCGGTTACAGTTTACGCCACTTCTGCTCGTCTCGATAGTAAGTCTAGCGTCGCATGAGAAAAAGACCTCCGCCGGTACAAATGCATCTAAGCCAACGCGTAAGCACCAGAGAGTTTAATCCGTCTCCGGGCTCTCGAAGCTATTAGTGCCGCGCGGGCATTTAACAGTCAGTAATAGCTCACCCCGCATTAGATGAAGTATGTCACCTCTAACGGACTTCGCATCTCTTGTGTTGTCCAGACTACAGACACTCTAGACAGAAGCCCCTCTGGCGGGCTTGGTGCAGCGCTGGAGTC"
print (dnaString)
print (dna(dnaString))

print ()
print (rna.__doc__)
dnaString = "CCCAACAGGCATGTGCGATGAATTATGGTGGCAGGAGCCATTAATAACATCGCTGTGGCCCAACCGGGATGTTGAGAGTTCAACCGATTTCGGCAAAACAAAGACACAGACGAGTTTTGTTTGGGAGGTAGAGCGAGAAGCCCCCATGCCGGATCCATCACCCGGTCTGTAACTTTTTAGGATAGGCGGGCGTGGTCTCCGCATTATCATTCAATCGCGGGTGCCGTATCTCGCCGTCGTTGCATCCCTTACAGCGGGACCAATACACGAACCAGTCCAATCAGGCTTGCTTGATACGCAAAATGTACAATCTATAAATTCGGCTACTAGCATAGCCGAGCCCCCGTAATGGCCTTATACCGCTGGAACGTTCATCTCGAGGGAGGGCCGTGCCACAAACCCGCGGAGCGGTGGCCGTAGATTATACTAGAACTAAAATACATCCTCACTACGGGTGTCGTGGACACCAAACTGAAGGTTGTTGAATACGCTTCCGGAGTAGGGTTCACTATACCTGGGCGAACATCAGCCCGAGCATTGCCACCAATCAAACTAACTCAAAATGACTACTATGTTAGCCTCCGGCGAAGGGGAGTCATTTTCCAATCCTGAAGATTTCCCCGCCCATCCTCGCTATTTTCTCATATCTCAAGAATCCCATGCTTTTTAAATGCCTATGAGAGTGTGTAGGGTCCCTTCTTTATCCTATAGTATCGGCTCCACGGTGACCATGCATTGAAGAATTATTAATGATTCACGGCGCCCATATAAGTCACGTGGCGCGCCCTTCTTGGTTTCATACGCTCCTCGCGCTTGTTTGAGAAAGAAGCAAGTCAGAATTCAGTATATGTTTACAGTCGTGGCGCAGGTACTTGCAACTCGGGTAGGCTACGCTGCCGCGTTCGAAGACACAAATCTACTGGTTACCTATCTGCAAACCAATTGTTAGGGTAGACAGCCGAAACTAGTCTAACCTCAGTAAATAG"
print (dnaString)
print (rna(dnaString))

print ()
print (fib.__doc__)
n = 36
k = 3
print (f'n = {n}, k = {k}')
print (fib(n, k))

print ()
print (fibd.__doc__)
n = 96
k = 18
print (f'n = {n}, k = {k}')
print (fibd(n, k))

print ()
print (gc.__doc__)
print ("datafile: gc_dataset.txt")
print (gc("gc_dataset.txt"))

print ()
print (hamm.__doc__)
dna1 = "ATGTACTGGTCAAAGTGTAGTTTACCTATCCTCAGTGACTGAAGGGCTATCGCGGTGTTGATTCAGTGGCATGCGGGCAGCGTAAGGACACAGATATTAAAATCGGGGAATCGTGTATGTGATAAAGGAACCGAGGGAATTCCAGTCAGCCGGCTCAAACGCAATTTGGTGGGCTTTGTGTCAAAGTCATAGTGCAGTGCGGTGCACGCGTTTAGACTATATGCCCTCTGAACTGTTAGGTTTGAAGAAGACGGGACGCGGAGTGAGCGAACGCTTTTAAAGATTGCCGTCGGTCCTCGGCGGGCCATCTGATCTGAAACCTTCTCAGGGGCCATCCTAGGCCCAAGACGGTCCACCGCTAACTAAGAGATAGTGCGATCGCGCTGTAAATGCGTATCTAGTGTGGAGATTGAGGCAGGGATCCCCCATTACAACCAGGGTCGCCCTGCGTCCACGACGCCTGGGCTACCGTTCAATGTGCACTCTGACCGGGAGCGTCCCTCTCGTGAGGCTAAATTCAGTTCTAATCGGTAGGGGAGAGAGTACATGTTTCGAAATCAGATGTACGACTTATTAAGGTCCTCTCTAATCCGTAGCCACACCAAAGTATTCGCCGATTAGGAACGGCAATCGTAAGACATTGTACTGCCCCCGTGCTGGTTGTCGCGTATAATGGCGCATATCGCGACACTGCCCTTATATAGCCATACACGAACGGTCCAAGTTTTAACAGAACCGACGTTGCTCTCTAAATTAGTGCTAATGGAGAGTAAGAACGAAGAACGAAGCTCTTTCCGCGAGAATATGTGAAAGCATCAGTCATCTAAGAACCGTTAGTGGTAGCGAAGTCTGCAAGCCTTCGGAAGTTCTCCAGATGTCGGCCCTATGCTCCACAAACGCGACTACGCCTGTGCAACTAAACCAGTCGG"
dna2 = "TAGTACCGATCAAGATAGGGTTTTTACATCGTCAGTCGATGCGGTCTTATGCCCATTTATGCTGAGTTTCCCAGCGGGAGATACTGGATAGAGCTATTAACTTCTCGGAAGCGTTGATGTGACCCAGCGGATTCGCGATCTCGAGGCTCTCCTCTCAGCCTCTTAGTGGTGCGAGCCTCAGTACATCGGGTAAACGGTCTGCGGCCCGCGTTTTGTCGATGTGGCCGTGGAAAGGATCCGTTTGTCTTAGACGGAAGGTTGATCTACCGGACGGCATTCAGGGTAATGCTTAATTTTCTGCTGATATTACCCAGTGTCACCGACACAAGAGCTTTCCTAGCCCCAAGACGTTTGTACCTTAACCACGTGTATGTATTAGCCTGCCGTAGTTTGGAATGAGTTGTATAGCAAGAGGCAAGTGTCCTCCACGACCAACTGGTGCCCCTGACGGCCAGGAACAATTTTGTTCAGCGCCGTATGGTCTCTGATTACCAGTTTGCGCGTCGTATGCAGAAGCACCAACTGACGTCGTGACATAGAGAGTATTGGTGTCTGAACGTGATGGAGTGATTCATGTGTATCCGTCTCTAGAGCTCGTCCAACATATCATCCGTCGATTAATGATAGCACAGTGCACCGAGAGTATACCCCCCGTACAAGGTTTGGTATTTAAGCGAGCATGTCCACAGAACGCACATAGGCACCCCAACTCAGCCGACCCAGGTTTCAAATTACGCGGACTTCCTTTACTCGTGTGTATTGTTGGACATGTAAACCATACAACCAACACCACTGTGCAACAATATGAGCAACTACCGATGTGCCCGTACTAACGCGAGCGGGAATAGTCGCCGAGGATTGACCAGTACTCAAGTTGACGGCTCTATACTATACAACGGCGACTACGCCAGGATAACCAAAGCTTTCAT"
print (dna1)
print (dna2)
print (hamm(dna1, dna2))

print ()
print (iprb.__doc__)
k = 17
m = 16
n = 15
print (f'k = {k}, m = {m}, n = {n}')
print (iprb(k, m, n))

print ()
print (prot.__doc__)
rnaString = "AUGUGUGUCCCUUUAACAUCUAACAGAAUGUCCAUUUGGAUUGUGCAAUUAUCACCGUCGGGGCGCCCAGACCGUUCCUCAUUCCAAUGUGGCGAACGACCGGACAUCAAGACGCCGUGGCAUCAUCUGCACUUGUUAGCGAAAGAUCGUAAGUAUCUGGGAAAGCUGCAAUCCAUCAGUGGUGCUCACAGCCCCCCACACGGUAUGUGCAGGGUCCCAUACGCUCCCUGUGUAUGCGACUUCGCACUUAGGCCUCGAGUAGGACUAGGUCAAGUGUGGGAUGCCGUAUUGCACAUAUAUGUACGGGAGGUGUAUGCGAGAGGAAAUGAAUAUGUUCUUAUAUACUUUAGGGCCUCUACCCAUCUACAUUCCCUUUCGCUGACUAUUCUGGCUCCUUACCUCGGAUCGAUUGUCGAAUUCGUCUCUAUUUGCGCAGUUCAAGGUCUAAAAAAGCGUCAGGUUGACCCUGACGUCUAUUCACACUUGCAUUCAAGCCCUGUAUGCGGAUACUUACCUCUAGACUGGAACCUUCAAGGUAAAACUCGACCAAUUAAAAUCCCAGGAUCUACACACGGUGACGUCCUCUUGCAUACCACGCAGUCCGCAGGAGUAGCCCUUAAUGGUGUUAAUGAAACAGACAAUCUUCUCAUGCCUUUGCCUCAAUUAUCAGUAGGAUAUCCAGGAAAUCUGAGCGCGGUACCCCUACGUACUAGAAGCUCGAUGCUCCUAAACAUCCGAAGCUAUCGGCACCGGAGUAAGAGUAGACAACGAGGAACCAGAGAAUUUACGACAUGCCCGCAUACCUAUCAGGCCCGUUCUUCGGUCAGAGCGGAAAGGCGCGGACAUAACAGGCCUGGGCAUUUCCCCAGGACACUACUGGCGAUUCCAAGAGCGGACGCCAAUCGGCCUACACCGCCGUUCUGUAAAGGCGACCAACUUAGAACAUGUCUUAAGCAAGCAGCGGCCUUCAGUUCUGCGCGCGUGUUUCAAAAAGCGGAGUACGCAGAAGGUGGGAAUACGCUUCGUACGGUUAUAUUUUCAUACAUCCCUCCGACAAGUGUUGUGGUGUUAACUACCUGUCUCUUAAGGACAACUUCAGUUUCCAGUCGGAGUGGAGAGCGUAGUCCGCCCAGUGUCCCUGCUCCCGUUACUGAUAACCUCUCCCACAGGGCGAAACGGAGGUGCGGCGUUACUUCCACUCCCACGAUGCGCGGGGCCCCGGGACGAAAAACAUACGCCGUUUAUUGCGUCGACAGUUCCCUAUUCUGCCUGUGGUGCAUAAAACCGAGCACGCAAAGUCACCUAAACUUGCUGGAGCCCAUCCAGGGAUUUUCGAACCUUGGUUCUGAGGAGUAUCUGCGUAACGGGUAUGUGCUUGUACGGCUUCGGUACGGCGACUCGUUACAUCUGGUAACUGCGCCUAGCCUUCGUAGUGUAGCAGACUGUUGGAGCUAUAGCAAUCUCCACGAAGUAAACACUGCGCGUGGCCGGCUAGUCGCGCUCGCCUCCAAUAGACUAGAUUACGCCGGCGGACCGUUAUUAUACAGACAUGAGCGAUUUCACGAGGCCAUCAUGCGGAGAGAGAUGACGCUCCUUUAUCACCAGUGGUGGGAAUAUACAAUUACUGAUAAGCCCGGAACGGCGAUGAAAUACUUCGUCAGGAAGAAGCGAUGGCGUGCUGCCGAACGUCGGAAUAAGGUGCUGGGUUGCUAUCAUUUAGGUGACCAUAUAUAUAUUAAAACUAAAUACCGCCAUUCCAGGUCCAGUAGGGGCGGCGUCCGGAUGGCGUAUCAGUCAAAUUGGGCAUACACUCAGCGGCAUCAAACUAAGCCGCUUGCGUUGUACAAACCUUCGACAGAGGACCGUCGGAUCGACAGAACGCGACAGCCGUGGGAUCGUUCACCAAGAGGAUGUAGGCGCUAUAUUUACAGGGGCAACGAACCCCUGAACACUGGUAACAUAUGCCUAUUUAGCACCUUUAUGCAUGACCUCCAUGCACUUAAUUCUUAUGGGCGGGGGGCCCUAGAGAACCACUCGUGUGCAAUAUUGGCUCUACACAUGCGAGAGCAGGUGGCCUCCAUGGCGCCUCAGACCAUAGUCGCACCCAUCAACAAUGUCGUAACGUGUUCGGAGACCAUAUUAGACCAUAAACCAACUUGCCGAUGGCCAGACAUUUCAUUUCCGCGACGGAGCGGAUUCUAUCUCAUUUUGUCCAAUGGCUCCUCAGUUAGGAUAUGGUUGCUCCUCCGCACAUUUCAUCUUACUUUGGGGCAUGUUGUCGUCUGCGAGAGUUUUCCGCGAGCGUUGACUUCAAGUGCGUGUCCAGCGCUGCUGGAUGGGGGUAGCCGUAAUCUGGCCCCGUCCUUGUUCGCUCCGAGUGCCGUUGCUUAUCCCGUGUACUCUAUCAACCUACCUGGGCGCAAUUGGACAACCGCAACCAGUUGUUCAGUACGCAUAACUGCCUACAGCUAUGCUUCAUCUGGCUUAGAGAGGCGUUUGGUCAUGUUUCACGACUGUCGACCGAGUGCUCGUACUCUCUUGUCCCGCCACCUUAAGGCUAGUUUUGGGCUAGUCGCGGUUGGUACGCCACUCGGGAAACGCCCCAGAUGUGCCGGCCGCGCACCUCGUACCUGCCCUUGUACUCUUGUAACACUAGCAAAGCCGAUGGUGUUGCCUUUUAUACUGUGGCCCACCGCGGCCACCGCGUCGAGUUUCCGUCCUUUGCCUCAACGGAAAUUUCAAGAGUAUGAUGAAUACAUGUGCCCGCCACUAAGGCCCACAGAGCUACGACACGUGCUUAGAUCCGACUCUGGCCCGGUCCCUGAAUUGGAUGUGGUAGCUUUGGUGGCGAUUACAGUGAAGCUAACUCUAGAAUCGGCACCUACGCAUUCCCGCAGGUAUCCUCAAACCAGUAAUGGCCCGGUUAGGUUUGAAAGGGUCAAAUCUGGCGCUAGAGAACGCGCCUCAAAAAAUAAUACACUUUUCCGAUUCGACCAAAGAACGAUUCCGAAACCGUGGCACAAUAAUGCGCUGUCGUGCCCCGUUACUGCUCUUCCGGCACUCAUGGGCACCAGUUAUAGACACAUCGCCUACUCUUCUACGAGCCAUCGGUGCCUACUGUCGAGAGGUCAGCCCCCGGGCGCAAUAUCGCAUCCGCAUCUCACUUCACUUUCUCUAGCAAUAUGCUGUCAACGUUGUAAAGAAGGACCUGUUGCCGUCUCCGGUAUGCAAUGUACCCCUCAGGCAGUGCCAUGCCUGGGUUAUAAUCCACCGUGGCUAUUAUCUGGUGCCGGCCCCAUAUCGUUCCGCACUUACAACGUGAAAUCUCGUUCCGUUUACGCCUUCCUGAUUUUCUGCGACAGACACCACGUCACCCUGAUCCCGGAAAUCGAAGAAACCUUAUGCCAGUGGGAUUUCGCGUGGGUAGACACACCAGCCACCCCUGCAACUUUUUACAAUACUCUAUUACGGGCUCGUAGAUGCCUGGAACCGCCUUUUCCAAGACCGGGGGUGCAUUACUCAUCCAAAGGAUCGCCCAAUUCGCGCCCGUAUGUAUCAGUUGCCUUGUUGCAACGGGUUCUUAUCUUUCUCAACUUUGAGGCACCGCUGCCACCCACGUAUCUUAGUGCGAACAACCAGCUUACUAUGCUCAGGCUCGGUUUUGCGACAUUUUCCUUGGCCACUUAUUGUGCCCCCACGCUGCCGUUAGUAUACAUGACGAAUCGCCCGUUAGCCCUGCCGGGAGAUCCUGGAGGCUGUCACACGCGUAAUCGUUGCGAUGAAGGUCUAAGAAGAAUCUGCCAAUCCUCAAGACCUGCAUCGAUGCUGUGUACGUAUUAUCUAUUGAACCUGUUUCCCCCCUGGCGCAGUUCUGCCGACCUUGUGGUUGCUACUACCCUUCGAAUAUGUCAAGAGUCCCCGUUUACUGUGUGUCUAGAGCUUAGUUCAAGGGCGGAACCGGUUUACGCGUCUCUUGUGGAUGCUUUAUGUGGCAACGGUACCUCCCCCGUGCUGAUGUUCUCUGAGUUACCGGACGCGAUCCUGAAACCUAACCCAGAUCAGACCCGACGCUUGGCAGUGGUUUGGAGUGCUCUGUUCCAAGAGCUCUGUUGCACGCUUCAGAUGUCCGUCGGCUCAGACGUGGACCCUUGUGAAAUCGUUGCAAAUAAACCAAAGAGCAUUACGGCGCACGAACGUGAGUUCAACUAUAUAAUUAGUCGGUGGAAUGACGCCCUGUUUUACUCACUUUUUCCUCCACUGAUCAGUGGCUAUCCGGGCGGCUUGUCUAAACCAGCUUCGCCCCCUUUCUUGAAUAGCCACCGACGAUUGACUUCUUGCAUGGCAAAGGGUGCCGUUUUCCUAGUGUAUGCUCCGAGCGCAAACCCUGGUCGAGGCUAUUUACCGGGCAUAGACCUUCAGAGACGUGUCAUAGUAAGGAGUAACGCCAUCACAGUUCGGAACCCAGGAAUGCCAUUGGCAAGGGAUGUUCUCCUGUUCUGGUCGUUCGAUAAGUCUACUGCUACGUCGCUGGUUCUCAGGGGCAAUACGCUGGUGCCAAUUAAAGUGUCCAAGCAUUGUAUCCCGGUUAUAUCCACAGUUAGUGUGCUGUGUAAAACCAGGCAUUCGACUACACGCGGAAGAGCUAAGUGGUUCUGCAGGGUAGUAUGUGCUGCUAGAUCAGUCCAGUCCGUGGGCCGUCGGCUUGCAGAUCACAGCUCUUCUGAUUGGUUAGCAGAACGAUGGCCUAGACAGCGGCGACCGUUACCCAAGUAUUAUUUUGGACCGAUCAGGCUAUACCGAGCUGCGCCCUCUUACAUUCGUGACUAUGUGUGCAUGCUCGAGGAGGUUAGUUAUAAGGAGGUCCAUAAGACAAGUUCAUCUUCUCACCACAUUUACGGCCAUUAUACCAUGAGUCACAUACCUGCCUUUUGGUUGCAGGGAGCUAUACCCAGAAGUGUCAACCUUGGCGACCUCACGAAUCGUCCGCGUCUAGUUGCGUUCAAAAGGUAUUGCCGCACGCUCCGCCCCUGGAACCGUAUGGAAAUAGAACAAAGGGGCUCUCCCCGUAAGCCGCGCUCAACUCCUCGGGCCCCUCGCGUAGCGCUCAAGUAUGAAUCCGAGUAUCGCUGCGUUGUUGCUUGGAACAAGACCGCCGUGCAAAACCCAACUAUAGGGACCCUAAUCGACGCUAUACGCUUUUACCGCUCAUUGCCACAAGUGAUAAAACAGUCCAUACCGGAGAGGGAGUGCGAACAGAGGCCAAGGGCUGGUCAGUCGUCUCGUUGCAGAACACGAUCAACGAAUGCGCGGGAACUUAGGGGUCCCCACAUUUCGAAGUUCGGUCAUCACGCUGAACUCUAUGCCAAUGUAAUAUUACAGCUCACCGGAGGACGCGUUGAUGUGUUAGCUCUAUUUAAAUUUCCACUCGCGGGGACUAUUAAGGGAUUAGGCCGGGCUGUGGCGCAAUCGCAAUAUCUGGGUGACGUUGGCCAAUUUAUUCGCCCAAUGGACUACUUCUCAUCAACACGCCAAUUCUAUCGUUCGAGAACCAUGGAGGGCCAAGAGGCCGCAAUGGCAAAGAACGCCAGCCAAGACAGCAGGUCUAGGAGGGAGCUAAACGGGAAACAACCAGUGGGGCCUAACUUGUUGGCUCUAAUUAGUUCGUUCCGGCAAAGGGUAACUUCCGGCGUGGAGUGUACAGGAAUCACGCGCCACAGCGCCGGCGCGGAGACAUCAAUUUAUGCCCGUCUCACGGGUACGGGCUUUCGCUCUUUAUUUUAUCCGUUAUUGGAACCAUGCGUCGGAAUAUACUCAAGCCUACAGGGUGGAAUCGUGUUCCGCAGCUCGAUGCGCCCCGGUGUCGACCUAAUACGGACAGAGACACUGCGUACACCCCAGGCACCUAAGGCAUACACAUGCCAAGUACCCCACGCUUGUUAUGAGCCCUGGUUGGGUUACGGACCUUCGUCUCGGCUACGUGCACGCAAUCGAGUCUGCUAUCCAUGCCUACCAACCCCAGGCAGGCGCAGCCCGAGGGUAACAUUCCCAUCAGUGCAGAACCGUUCUGGGCCCAUGGUCUACGAUGCUGUAAUAUACCUAGCCAGUUGGGCACAAUCAUGCCAAGGGUGUAACGUACCGGAUUUCCAAGUCAUAGGAAGUAAAAUGGGGAGCUUUUGUUGGUUCUUUGAAUUGUUAACUCAUGUUUACCAAAGUGGACUUACCGGGUCAACGCGUUAUGACGGCUAUUUAACCCCCCGGUACGCGGCCCCUCUCAGGAAUGGAUCGCUGAAAACAGGCCUACGAGUGAAGGAAGACGUCGUAACGCCGGAGGAUGGACUUUGUAAUCGGGUAACUCUAAUACAUUUCAGAGACGACCAUAAGCUCAGGCUCCUUAAGAUGAGUAGACACAUAGCCGUACAGGGGGUUCAUUCCUUCUGUUUCCAGCUCAGUAAAAUGUACUACUCGGUUCAGCAUGCACCCGCUAAGAGGAGUGGUGGUAGCCAUACUCGGACGGACUACUUAAGCCUUCCGGAUAUUGUUCAACCAACCCGACAAAAGCUUGAUAACGUAAAAAUCUUUAUAACUAGUAACCCUGAUCUUAACGGCUCCGUCUACGGAAAAAGGCGAUACUUCGGAAUGUGGACACGACUACUGUUUGGGAAGACGUGGUUGAACACACUCUACCAAUAUGGAGGUAAACCGUCGACCCAUGUUGAAUUUCUAGGGAGCAAUGGAAGGGACCCGGAUCCCUUGCUAUCUGGUAAGAUGGGGAGAAAAAGCACCUUCGAAUCAUCAAUCGAGUCGUCCUCGGCUCAUGGUAUACCUAUGGUCGGCCCAUGUAGUUCGGCUUUAGCUGUGAAAUUUCCGUACUGGGUGGUGAUAGAUUUAAGUCGCGAAGUAUUCUGGUCACUCAGAGGCCCGCGUAUCGUCGGUAAUGUACGUAAAUCGCACCGAUUUUUCUCAAAUUCCUUAAUACAUGGAUCGUGUCCACCGAUGGCGCUCCUCUCGAUCUCAUAUAUGGCGAUUGGCGGGAACAUGUCAAGCCAGCGGCAGCUCAUGCAUUGUAACAAUCGUGCACCCAAACAAGGUGCGUUAUCCCCGACUACAUCGACAGUCGCUCAGCUACCGAAUGCCCAUGGCCUAUGCGUCGCGGUCUCGACUCCUGUAUACAUCGGUAUGGAUAAGAUGCAGCUGGUCAUAAGUCCCAGUGCGCGUCACAUUAGAUUACUGUUUCACGCCUGUCCCGCCCUAGCUAUUACCCAGUAUACAAGGCUAACGCGCUCCACGCAGCUCAACACCGGGGAGGCAGUAACAACUUACCAUGCAUAUGCGUACUCGACCUCUCUAUGGUGGACUACCGAGCGAUGUAGACUCAAUACGCAAGGGCUCCAACCUUUACCACUCUGUCUGUCUACGCGAGCCUCCAACGCCGCAGAGAGUAUCGGAUCACUAGAAUCAUGGUGCGCGACUACUUCAUGUUCGGCUUGGACUGGGCACACGUACGAAAGUCUUGUCCCAGCCGAAUCGGCAAGUCCCCCGUUAAAACCCUAUCCUCGCACGUCGGUAUAUGCAUGCGCAGGCUGUCCCUAUUAUGCGAACCUUCUUUCGCCGUCGUAUGUGGCGACUAGACGUCGGUUUCGGUUCUCUUUCUUCCUAAUGUCUCUGUUCAGUAUCUUCCAUUGUUGCCCUUCCUUCCUCAUACAGAGUCACAAUUACAUUCGACGUAUUAGCCGUGUAGAGGAUAGUCGUUCAAUCAAUUUGCCAGGGGCCCAAAGCCUUCCUGGGCCCAACGUUGAUCCCCGAGAACUUAAAUAUUGUCCAAUUUAUGUUGUGGACAAGUCGUUGACGCAUACUUUGUCGGACCAAUCAGGCGGUUUAGACAGUGAACGGGCUAGUGGACCGAAGCAUUACAAAUUCGUGCCUAAUAUAGACAAGGCUUGUUUGCAGCUAUUGAAGUGUACUGCACCUCAAGGGAGUGAUAAACGCCUCGGUACUAGGCCAGAUCCUCCAUUCGAUAUAUUCAUCGCGUACCUUCAUAACUAUAUCGUACACAACACACAUAAUUACAGCACACUGCGGCAACAGACUGGAGUUUUACGCUGUAAGCCUCGGAAGCCGGUACACAAUUCCGUAUCGCCCUCCCUGUGGUGGUCGUGUCUGAAGGACGCAUCAACGCUUUAUAUCAGUCCCAACGCAGGGCACUUUGAGUGUGGUAUAACGUUUAUAGAGAAAUCGUGUUCUGAUCAUCCUUUGAUCGGAAGUGGCUCGAAGAUGCGGGUUGGCAGCUGUUCCUUACCAAGCUUUCUAACGACGGAGUUUAUACCGAGAUGGGCAGGUCAAGACGACAGUCGCUUGAAACUAGGACAGUGCAUCUCAGGGUCUUCUACUAUGGCUACGCGCCAGGAAUUCCGGUUAUUAGGAUUUUCGGGCAAUAGAGGGGGUCUCUACAACCUGUACAACAUGUUACCGAAUCGAUCGAGCGCCCGAUCCUUGUGUCGUGAAUUAUCCAGGCAGUGCUCGCCUGCGAUUAGUGGACAUGACCGUAGGGACAAACCUGUUGCCACCACUAAAUUGCAGAAUUACAGUGCAGAUAGCACCGCCUGGCGACUCUCAGGAUGUAAGAUUCUCGACCCAACCCGAAUGUUGGGGGACUCAUUACGCGGCUCCCCGAAUCAGUCCAUAGCCCCCUCAGUCUAUGCGAACCCGAAUGUGGUUAGCGGUAAACUAUUCCCAGCCGGUCAGUUGUAUCACGAGGUUUUUUUAAAUGUUGGAGUUGCUCCUGAAUUCACGACAAUCGGGCGCAACCACGGCGUUGCCGACAUAAAAUCAACCGAUAUUCGAGUCGGCUGGCAGGUUUUUACCGCAAGUAGGUCAGCUUAUAGGCGAGAACAACUCCUCACGCGCUAUCAUUUAGAUACUAAUUACUGCAUGGGCUCGUUGGUGUGCUUACGGCUUAUUUGUUUUCACACGUACACGAUUGACGGCCGUCCCGAGAACUACGAUUUAUUGAACAGGUCCCGUGCACCUGAUGAUAGGCCAUCGGGAUGCGCAAGCGCUAUACAGGCCUUCCACCAUAGGCGUGUGCUCAUUUCUCCUCACUCUAGUAGUCAAUGGAGCUGGCACAACUCCGAAAAGCCUGUUGUUCCGACCGGCGGUCUGGAUCAGCAAAGUGCCUGCCCUCGUCCAGUGCCAGGUCUGGGAACUCAGAGUUGA"
print (rnaString)
print (prot(rnaString))

print ()
print (subs.__doc__)
dna1 = "CGTATGAACCGTATGAAATCGTATGAGGCGTATGAAGCCCGTATGAATCCGTCCCGTATGACACGTATGATGTCCCGTATGACGTATGACGTATGACGTATGAAAGCGTATGACGTATGATCCACCGTATGAGACGTATGACGTATGACACGTATGACGTATGACGTATGAGCGTATGATCGTATGAGACGTATGACCCGTATGACGTATGAAGCCTCGTATGAACGTATGAGATCACGTATGACGTATGACAAGGCGTATGAATCGTATGAATACCGCGTATGATGGAGTCGTATGACCGCGTATGAAAGGCTCGTATGAAGCGCGTATGACCGTATGACGTATGACGTATGAAACGTATGACGTATGAGCGTATGATCGTATGACCGGCGTATGAGCCATTTGCGTATGAACGTATGAGCTCTCGTATGAATAACGTATGATGACGTATGAGGTCGTATGACGTATGAAGCGTATGATACGTATGAGTTACGTATGACAGCTTCGCTTCCGTACGTATGATTCCGTATGAGATCTCCGTATGACGTGTCGTATGAGCGTATGACACTCATAGCGTATGATCGTATGACGTAATCGTATGACACGTATGACGTATGACTCGTATGACGTATGACTCGTATGATCGTATGACGTATGAGCCGTATGACCGTATGACCGTATGACCCGTATGAACCGTATGACACTTACGTATGAAACGTATGAGCCCCCGTATGACGTATGAACGTATGAAGCACGTATGAAGAGCCGCGTATGAGCCGCAGTGCGTATGAGCTCGTATGACGTATGAACGTATGAGTGTCCCGTATGAAGAAACGTATGACGTATGACGTATGAGCCGTATGATACTCGTATGA"
dna2 = "CGTATGACG"
print (dna1, dna2)
print (subs(dna1, dna2))

print ()
print (cons.__doc__)
dna1 = "CGTATGAACCGTATGAAATCGTATGAGGCGTATGAAGCCCGTATGAATCCGTCCCGTATGACACGTATGATGTCCCGTATGACGTATGACGTATGACGTATGAAAGCGTATGACGTATGATCCACCGTATGAGACGTATGACGTATGACACGTATGACGTATGACGTATGAGCGTATGATCGTATGAGACGTATGACCCGTATGACGTATGAAGCCTCGTATGAACGTATGAGATCACGTATGACGTATGACAAGGCGTATGAATCGTATGAATACCGCGTATGATGGAGTCGTATGACCGCGTATGAAAGGCTCGTATGAAGCGCGTATGACCGTATGACGTATGACGTATGAAACGTATGACGTATGAGCGTATGATCGTATGACCGGCGTATGAGCCATTTGCGTATGAACGTATGAGCTCTCGTATGAATAACGTATGATGACGTATGAGGTCGTATGACGTATGAAGCGTATGATACGTATGAGTTACGTATGACAGCTTCGCTTCCGTACGTATGATTCCGTATGAGATCTCCGTATGACGTGTCGTATGAGCGTATGACACTCATAGCGTATGATCGTATGACGTAATCGTATGACACGTATGACGTATGACTCGTATGACGTATGACTCGTATGATCGTATGACGTATGAGCCGTATGACCGTATGACCGTATGACCCGTATGAACCGTATGACACTTACGTATGAAACGTATGAGCCCCCGTATGACGTATGAACGTATGAAGCACGTATGAAGAGCCGCGTATGAGCCGCAGTGCGTATGAGCTCGTATGACGTATGAACGTATGAGTGTCCCGTATGAAGAAACGTATGACGTATGACGTATGAGCCGTATGATACTCGTATGA"
dna2 = "CGTATGACG"
print (dna1, dna2)
print (cons(dna1, dna2))
